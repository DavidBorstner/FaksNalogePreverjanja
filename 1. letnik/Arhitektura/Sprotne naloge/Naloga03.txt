1. Zapišite ukaz v zbirniku za procesor ARM, ki v register R1 naloži konstanto 128. 
Uporabite takojšnje naslavljanje (ukaz MOV). 

          .mov R1,#128

Izpišite ustrezen strojni ukaz (32 – bitno število v šestnajstiški obliki). 

          0xE3A01080

Program izvajajte po korakih in opazujte vrednosti registrov r15(PC) in R1. 
Kakšni sta njuni vrednosti na koncu programa? 

Pred izvajanjem: r1 = 0  PC = 0x20
Po izvajanju:    r1 = 0x80  PC = 0x24
			

2. Zapišite ukaz(e) v zbirniku za procesor ARM, ki v register naloži vrednost spremenljivke:

a) naloži 32-bitno vrednost 0x12345678 v register R1

		   STEV1:  .word 0x12345678
		   adr	r0,stev1 @ naslov stev1 v r0
		   ldr  r1,[r0]  @vrednost stev1 v r1		   

b) naloži 8-bitno vrednost 128 v register R1.

		   STEV2:  .byte 128
		   adr   r0,stev2 @ naslov stev2 v r0
		   ldrb  r1,[r0] @vrednost stev2 v r1

c) naloži 16-bitno vrednost 0xF123 v register R1

		   STEV3: .hword 0xF123
		   adr	r0,stev3 @ naslvo stev3 v r0
		   ldrh	r1,[r0] @vrednost stev3 v r1

Naloge rešite s posrednim (baznim) naslavljanjem brez odmika preko registra R0.


3. Napišite zaporedje ukazov v zbirniku za procesor ARM, ki vrednost 32-bitne spremenljivke STEV1 prepiše v 32-bitno spremenljivko STEV2. 
Nalogo rešite še za primer, če sta spremenljivki STEV1 in STEV2 8-bitni oziroma 16-bitni. 
Vse primere rešite s posrednim (baznim) naslavljanjem brez odmika preko registra R0.

	a)

          .text
STEV1:    .word 0x12345678
STEV2:    .word
          .align

          .global __start
__start:
          adr r0, STEV1
          ldr r1, [r0]
          str r1, STEV2
end:      b end  

b)

          .text
STEV1:    .hword 0x5555
STEV2:    .hword
          .align

          .global __start
__start:
          adr r0, STEV1
          ldrh r1, [r0]
          strh r1, STEV2
end:      b end

c)

          .text
STEV1:    .byte 0x3A
STEV2:    .byte
          .align

          .global __start
__start:
          adr r0, STEV1
          ldrb r1, [r0]
          strb r1, STEV2
end:      b end   

