1. Napišite zaporedje ukazov v zbirniku za procesor ARM, ki v register najprej naloži vrednost 0 – 
uporabite takojšnje naslavljanje. Kakšno je stanje zastavic Z in N po tem ukazu? Zakaj? 
Nato naj program registru odšteje vrednost 1. Kakšna je vrednost registra, če predstavlja nepredznačeno / 
predznačeno število? Kakšno je stanje zastavic Z, C, V in N po tem ukazu? Zakaj?
Nato naj program registru prišteje vrednost 2. Kakšno je stanje zastavic Z, C, V in N po tem ukazu? Zakaj?
Kakšna je končna vrednost registra, če predstavlja nepredznačeno / predznačeno število?

          .text
          .align
          .global __start
__start:
          movs r1, #0       @R1=0 CPSR: Z=1
          subs r1, #1       @R1=0xFFFFFFFF CPSR: N=1
          adds r1, r1, #2   @R1=1 CPSR: C=1
          
__end:    b __end   

Končna vrednost registra je 1

2. Napišite zaporedje ukazov v zbirniku za procesor ARM, ki s pomočjo ALE ukaza
v register najprej naloži vrednost 1. Kakšni vrednosti imata zastavici Z in N po tem ukazu? Zakaj?
Nato naj program odšteje od registra vrednost 1. Kakšne vrednosti imajo zastavice Z, C, V in N po tem ukazu? Zakaj? 
Nato naj program še enkrat odšteje vrednost 1 od registra. Kakšne vrednosti imajo zastavice Z, C, V in N po tem ukazu? Zakaj?
Kakšna je končna vrednost registra, če predstavlja nepredznačeno / predznačeno število?

          .text
          .align
          .global __start
__start:
          adds r1, #1     @R1=1, CPSR: Z=0, N=0
          subs r1, #1     @R1=0, CPSR: Z=1, C=1
          subs r1, #1     @R1=0xFFFFFFFF, CPSR: N=1
          
__end:    b __end

Končna vrednost je 0xFFFFFFFF

3. Napišite zaporedje ukazov v zbirniku za procesor ARM, ki izračuna izraz STEV1 = STEV2 + STEV3 – STEV1,
pri čemer je STEV1 16-bitna predznačena spremenljivka, STEV2 in STEV3 pa 8-bitni predznačeni spremenljivki z začetnimi
vrednostmi (določite jih s psevdoukazi): STEV1 = -10(10), STEV2 = 64(16), STEV3 = -2(10). Preverite pravilnost rezultata!

          .text
STEV1:    .hword -10
STEV2:    .byte 0x40
STEV3:    .byte -2
          .align
          .global __start
__start:
          @STEV1 = STEV2 + STEV3 – STEV1
          adr r0, STEV2
          ldrb r2, [r0]
          adr r0, STEV3
          ldrb r3, [r0]
          adr r0, STEV1
          ldrh r1, [r0]
          add r4, r2, r3
          sub r4, r1
          str r4, [r0]
          
__end:    b __end

